{"version":3,"file":"inactivityListener.js","sources":["../src/constants.ts","../src/index.ts","../src/inactivityListener.ts"],"sourcesContent":["export const standardEventTypes: string[] = [\n    'keydown',\n    'keyup', // to be sure\n    'mousemove',\n    'mouseenter', // to be sure\n    'mousedown',\n    'mouseup', // to be sure\n    'scroll',\n    'wheel',\n]\n","import { inactivityListener } from './inactivityListener'\n\nconst index = inactivityListener\n\nexport default index\n","import { standardEventTypes } from './constants'\n\nconst inactivityListener = (function () {\n    // configurable time until callback is executed - Number in milliseconds\n    let timeLimit: number\n    // configurable function to execute after timeLimit passed - Function\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let callback: () => any\n    // generated id for inactivity span - Number\n    let timeoutId: number = Number.NaN\n    // generated timestamp for start or last activity - Date object\n    let timeRoot: Date\n    // internal events to listen to - String[]\n    let eventTypes: string[]\n    // default events to listen to - String[]\n    // const standardEventTypes: string[] = [\n    // internal state; one of 'void', 'busy' or 'lapse' - String\n    let state = 'void'\n\n    /**\n     * Calculate lapsed timeout\n     * @return {Number} milliseconds after start\n     */\n    const elapsed = function (): number {\n        const now = new Date()\n        const passed = now.getTime() - timeRoot.getTime()\n        return passed\n    }\n\n    /**\n     * Execute callback when time is up\n     * @private\n     */\n    const execute = function (): void {\n        state = 'lapse'\n        try {\n            callback()\n        } catch (error) {\n            console.error('inactivityListener executed a erroneous callback')\n        }\n    }\n\n    /**\n     * Put up a new round of waiting\n     * @private\n     */\n    const watch = function (): void {\n        state = 'busy'\n        timeRoot = new Date()\n        if (!Number.isNaN(timeoutId)) ignore()\n        timeoutId = window.setTimeout(execute, timeLimit)\n    }\n\n    /**\n     * Terminate the timeout\n     * @private\n     */\n    const ignore = function (): void {\n        clearTimeout(timeoutId)\n        timeoutId = Number.NaN\n    }\n\n    /**\n     * Reset critical values\n     * and start waiting again.\n     * Works when the timeout is set\n     */\n    const reset = function (): void {\n        // only when timeout is set\n        if (state !== 'busy') return\n        ignore()\n        watch()\n    }\n\n    /**\n     * Start waiting with same timelimit and callback\n     * Works when the timeout is completed\n     */\n    const restart = function (): void {\n        // not when untouched or timing\n        if (state !== 'lapse') return\n        watch()\n    }\n\n    /**\n     * Add or remove EventListeners\n     * @private\n     * @param {String} aim - 'add' | 'remove'\n     */\n    const eventHandling = function (aim: string): void {\n        // event options\n        const eventOptions = { passive: true, capture: true }\n        let count = 0\n\n        eventTypes.forEach(function (type: string): void {\n            const handler = `on${type}`\n            if (handler in window) {\n                const binder = aim === 'add' ? window.addEventListener : window.removeEventListener\n                binder(type, reset, eventOptions)\n                count++\n            } else if (handler in document) {\n                const binder =\n                    aim === 'add' ? document.addEventListener : document.removeEventListener\n                binder(type, reset, eventOptions)\n                count++\n            } else if (aim === 'add') {\n                console.warn(`inactivityListener rejected ${type}-event`)\n            }\n        })\n\n        if (!count && aim === 'add') {\n            console.warn(`inactivityListener resets only on coded calls!`)\n        }\n    }\n\n    /**\n     * Bring in variables, start listeners and timer.\n     * @param {Number} waitTime - time in milliseconds\n     * @param {Function} action - callback\n     * @param {String[]} eventNames - new list of events to watch\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const start = function (waitTime: number, action: () => any, eventNames: string[] = []): void {\n        if (state !== 'void') return\n        timeLimit = waitTime\n        callback = action\n        eventTypes = standardEventTypes\n        if (eventNames.length) {\n            eventTypes = eventNames.map((name) => name.toLowerCase())\n        }\n        eventHandling('add')\n        watch()\n    }\n\n    /**\n     * Cleanup for single page apps\n     */\n    const stop = function (): void {\n        state = 'void'\n        ignore()\n        eventHandling('remove')\n    }\n\n    return {\n        start: start,\n        reset: reset,\n        get lapse() {\n            return elapsed()\n        },\n        restart: restart,\n        stop: stop,\n    }\n})()\n\nexport { inactivityListener }\n"],"names":["standardEventTypes","index","timeLimit","callback","timeRoot","eventTypes","timeoutId","Number","NaN","state","execute","error","console","watch","Date","isNaN","ignore","window","setTimeout","clearTimeout","reset","eventHandling","aim","eventOptions","passive","capture","count","forEach","type","handler","addEventListener","removeEventListener","document","warn","start","waitTime","action","eventNames","length","map","name","toLowerCase","lapse","getTime","restart","stop"],"mappings":"AAAO,MAAMA,EAA+B,CACxC,UACA,QACA,YACA,aACA,YACA,UACA,SACA,SCNEC,ECAqB,WAEvB,IAAIC,EAGAC,EAIAC,EAEAC,EAJAC,EAAoBC,OAAOC,IAQ3BC,EAAQ,OAMZ,MAUMC,EAAU,WACZD,EAAQ,QACR,IACIN,GAGH,CAFC,MAAOQ,GACLC,QAAQD,MAAM,mDACjB,CACL,EAMME,EAAQ,WACVJ,EAAQ,OACRL,EAAW,IAAIU,KACVP,OAAOQ,MAAMT,IAAYU,IAC9BV,EAAYW,OAAOC,WAAWR,EAASR,EAC3C,EAMMc,EAAS,WACXG,aAAab,GACbA,EAAYC,OAAOC,GACvB,EAOMY,EAAQ,WAEI,SAAVX,IACJO,IACAH,IACJ,EAiBMQ,EAAgB,SAAUC,GAE5B,MAAMC,EAAe,CAAEC,SAAS,EAAMC,SAAS,GAC/C,IAAIC,EAAQ,EAEZrB,EAAWsB,SAAQ,SAAUC,GACzB,MAAMC,EAAU,KAAKD,IACrB,GAAIC,KAAWZ,OAAQ,EACI,QAARK,EAAgBL,OAAOa,iBAAmBb,OAAOc,qBACzDH,EAAMR,EAAOG,GACpBG,GACH,MAAM,GAAIG,KAAWG,SAAU,EAEhB,QAARV,EAAgBU,SAASF,iBAAmBE,SAASD,qBAClDH,EAAMR,EAAOG,GACpBG,GACH,KAAkB,QAARJ,GACPV,QAAQqB,KAAK,+BAA+BL,UAEpD,IAEKF,GAAiB,QAARJ,GACVV,QAAQqB,KAAK,iDAErB,EA8BA,MAAO,CACHC,MAtBU,SAAUC,EAAkBC,EAAmBC,EAAuB,IAClE,SAAV5B,IACJP,EAAYiC,EACZhC,EAAWiC,EACX/B,EAAaL,EACTqC,EAAWC,SACXjC,EAAagC,EAAWE,KAAKC,GAASA,EAAKC,iBAE/CpB,EAAc,OACdR,IACJ,EAaIO,MAAOA,EACHsB,YACA,OA3HQ,IAAI5B,MACG6B,UAAYvC,EAASuC,SA2HvC,EACDC,QAvEY,WAEE,UAAVnC,GACJI,GACJ,EAoEIgC,KAbS,WACTpC,EAAQ,OACRO,IACAK,EAAc,SAClB,EAWH,CAtJ0B"}