const e=function(){let e,t,n,o,i,s=["keydown","keyup","mousemove","mouseenter","mousedown","mouseup","scroll","wheel"],c="void";const r=function(){c="lapse";try{t()}catch(e){console.error("inactivityListener caught faulty callback")}},a=function(){c="busy",o=new Date,void 0!==n&&u(),n=setTimeout(r,e)},u=function(){clearTimeout(n),n=void 0},d=function(){"busy"===c&&(u(),a())},l=function(e){const t={passive:!0,capture:!0};let n=0;i.forEach((function(o){const i=`on${o}`;i in window?(window[e+"EventListener"](o,d,t),n++):i in document?(document[e+"EventListener"](o,d,t),n++):"add"===e&&console.warn(`inactivityListener rejected ${o}-event`)})),n||"add"!==e||console.warn("inactivityListener resets only on coded calls!")},v=function(){c="void",u(),l("remove")};return{start:function(n,o,r){e=n,t=o,i=s,Array.isArray(r)&&r.length&&(i=r.join().toLowerCase().split(",")),"void"===c&&l("add"),a()},reset:d,get lapse(){return new Date-o},restart:function(){"lapse"===c&&a()},stop:v,destroy:v}}();export default e;
//# sourceMappingURL=inactivityListener.js.map
