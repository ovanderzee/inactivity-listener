const e=["keydown","keyup","mousemove","mouseenter","mousedown","mouseup","scroll","wheel"],n=function(){let n,t,o,i,s=Number.NaN,r="void";const c=function(){r="lapse";try{t()}catch(e){console.error("inactivityListener executed a erroneous callback")}},a=function(){r="busy",o=new Date,Number.isNaN(s)||u(),s=window.setTimeout(c,n)},u=function(){clearTimeout(s),s=Number.NaN},d=function(){"busy"===r&&(u(),a())},l=function(e){const n={passive:!0,capture:!0};let t=0;i.forEach((function(o){const i=`on${o}`;if(i in window){("add"===e?window.addEventListener:window.removeEventListener)(o,d,n),t++}else if(i in document){("add"===e?document.addEventListener:document.removeEventListener)(o,d,n),t++}else"add"===e&&console.warn(`inactivityListener rejected ${o}-event`)})),t||"add"!==e||console.warn("inactivityListener resets only on coded calls!")};return{start:function(o,s,c=[]){n=o,t=s,i=e,c.length&&(i=c.join().toLowerCase().split(",")),"void"===r&&l("add"),a()},reset:d,get lapse(){return(new Date).getTime()-o.getTime()},restart:function(){"lapse"===r&&a()},stop:function(){r="void",u(),l("remove")}}}();export{n as default};
//# sourceMappingURL=inactivityListener.js.map
