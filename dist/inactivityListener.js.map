{"version":3,"file":"inactivityListener.js","sources":["../src/inactivityListener.js"],"sourcesContent":["const inactivityListener = (function () {\n    // time until callback is executed - Number in milliseconds\n    let timeLimit\n    // to execute after timeLimit passed - Function\n    let callback\n    // id for inactivity span - generated\n    let timeoutId\n    // timestamp of start or last activity - Date object\n    let timeRoot\n    // to what events to listen\n    let eventTypes = [\n        'keydown',\n        'keyup', // to be sure\n        'mousemove',\n        'mouseenter', // to be sure\n        'mousedown',\n        'mouseup', // to be sure\n        'scroll',\n        'wheel',\n    ]\n    // void, busy, lapse\n    let state = 'void'\n\n    /**\n     * Calculate lapsed timeout\n     * @private\n     * @return {Number} milliseconds after start\n     */\n    const elapsed = function () {\n        const past = new Date() - timeRoot\n        return past\n    }\n\n    /**\n     * Execute callback when time is up\n     * @private\n     */\n    const execute = function () {\n        state = 'lapse'\n        try {\n            callback()\n        } catch (error) {\n            console.error('faulty callback')\n        }\n    }\n\n    /**\n     * Put up a new round of waiting\n     * @private\n     */\n    const watch = function () {\n        state = 'busy'\n        timeoutId = setTimeout(execute, timeLimit)\n    }\n\n    /**\n     * Terminate the timeout\n     * @private\n     */\n    const stop = function () {\n        clearTimeout(timeoutId)\n    }\n\n    /**\n     * Reset critical values\n     * and start waiting again.\n     * Works when the timeout is set\n     */\n    const reset = function () {\n        // only when timeout is set\n        if (state !== 'busy') return\n        stop()\n        timeRoot = new Date()\n        watch()\n    }\n\n    /**\n     * Start waiting with same timelimit and callback\n     * Works when the timeout is completed\n     */\n    const restart = function () {\n        // not when untouched or timing\n        if (state !== 'lapse') return\n        timeRoot = new Date()\n        watch()\n    }\n\n    /**\n     * Add or remove EventListeners\n     * @private\n     * @param {String} aim - 'add' | 'remove'\n     */\n    const eventHandling = function (aim) {\n        // event options\n        const eventOptions = { passive: true, capture: true }\n\n        eventTypes.forEach(function (type) {\n            const handler = `on${type}`\n            if (handler in window) {\n                window[aim + 'EventListener'](type, reset, eventOptions)\n            } else if (handler in document) {\n                document[aim + 'EventListener'](type, reset, eventOptions)\n            } else {\n                console.error(`inactivityListener rejected ${type} event`)\n            }\n        })\n    }\n\n    /**\n     * Find the id's, even when the box was changed\n     * @param {Number} waitTime - time in milliseconds\n     * @param {Function} action - callback\n     */\n    const start = function (waitTime, action) {\n        timeLimit = waitTime\n        callback = action\n        eventHandling('add')\n        watch()\n    }\n\n    /**\n     * Cleanup for singe page apps\n     * @private\n     */\n    const destroy = function () {\n        state = 'void'\n        stop()\n        eventHandling('remove')\n    }\n\n    return {\n        start: start,\n        reset: reset,\n        get lapse() {\n            return elapsed()\n        },\n        restart: restart,\n        destroy: destroy,\n    }\n})()\n\nexport { inactivityListener }\n"],"names":["timeLimit","callback","timeoutId","timeRoot","eventTypes","state","execute","error","console","watch","setTimeout","stop","clearTimeout","reset","Date","eventHandling","aim","eventOptions","passive","capture","forEach","type","handler","window","document","start","waitTime","action","lapse","restart","destroy"],"mappings":"0PAA2B,WAEvB,IAAIA,EAEAC,EAEAC,EAEAC,EAEAC,EAAa,CACb,UACA,QACA,YACA,aACA,YACA,UACA,SACA,SAGAC,EAAQ,OAOZ,MASMC,EAAU,WACZD,EAAQ,QACR,IACIJ,IACF,MAAOM,GACLC,QAAQD,MAAM,qBAQhBE,EAAQ,WACVJ,EAAQ,OACRH,EAAYQ,WAAWJ,EAASN,IAO9BW,EAAO,WACTC,aAAaV,IAQXW,EAAQ,WAEI,SAAVR,IACJM,IACAR,EAAW,IAAIW,KACfL,MAmBEM,EAAgB,SAAUC,GAE5B,MAAMC,EAAe,CAAEC,SAAS,EAAMC,SAAS,GAE/Cf,EAAWgB,SAAQ,SAAUC,GACzB,MAAMC,EAAU,KAAKD,IACjBC,KAAWC,OACXA,OAAOP,EAAM,iBAAiBK,EAAMR,EAAOI,GACpCK,KAAWE,SAClBA,SAASR,EAAM,iBAAiBK,EAAMR,EAAOI,GAE7CT,QAAQD,MAAM,+BAA+Bc,eA2BzD,MAAO,CACHI,MAlBU,SAAUC,EAAUC,GAC9B3B,EAAY0B,EACZzB,EAAW0B,EACXZ,EAAc,OACdN,KAeAI,MAAOA,EACPe,YACI,OAzGS,IAAId,KAASX,GA2G1B0B,QAxDY,WAEE,UAAVxB,IACJF,EAAW,IAAIW,KACfL,MAqDAqB,QAbY,WACZzB,EAAQ,OACRM,IACAI,EAAc,YA/HK"}